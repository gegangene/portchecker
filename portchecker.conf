# this file sets essential values for the portchecker.sh and initialise.sh scripts to operate. 

# the sender.py configuration is done with the mailconfig.json file (in the "recipient-addresses" value, use either a single recipient email address in a string, or a list of multiple email address strings)
# it is recommended to make mailconfig.json -rwx for others (xy0) to prevent other users from accessing the sender's email account credentials 

# host to scan. can be IP address or dns/hosts-translatable address
host:	localhost

# if you want initialise.sh to change your domain in sender e-mail address in mailconfig.json to the hostname of this host, change below value to "1". The initialise.sh is invoken by the portchecker.sh when you make any change in rescan_every value below, or by you to initialise program environment before first use.
# note, that while having your hostname as domain is convenient for distinguishing from which host e-mail is coming, e.g. gmail can reject your e-mails from non-recognisable e-mail addresses. the default domain, if not defined any else value of sender_domain in mailconfig.json, is "localhost", which should be acceptable for gmail
use_hostname_as_domain: 0

# numbers of ports to scan. there mustn't be any space between number and a comma. if you want, you can define ranges like "2-23,25-69", or just scan all typing "-"
ports:	22,69,443,80,21

# path to save scan results. remember that script needs to have permissions to write and read in the results directory
results_path:	.

# how often you want to perform scanning (in cron format: e.g. */5 * * * * means at every [0-2][0-9]:[0-5][0,5])
rescan_every:	*/5 * * * *


# define whether you want to get an e-mail with "open", "closed", "filtered" or any ("*") defined upper ports
notify_about:	*

# define whether you want to get an e-mail with all ports or only when something has changed from last scan (the value of 1 will add an extra line in results file, containing the changes, e.g. -o+c80 -c+o443 for 80 port closed between scans and 443 opened)
notify_on_change_last: 0	
# define whether you want to compare changes in current results with previous records (the value of 1 will cause adding an extra bottom line in results file, containing the last unixstamp when the change occured, for every change separately. if there is no such change in the pas records, the result will be "n/a")
notify_on_change_comparison: 0

#The number defines how old the results are to be taken into account by the program for checking the occurrence of a given state change. E.g. when port 80 is off the table, compared to the result of the previous scan, it will add to the result file the most recent timestamp from the interval [current_timestamp-compare_age; current_timestamp) in which such a situation occurred.
compare_age:	172800
